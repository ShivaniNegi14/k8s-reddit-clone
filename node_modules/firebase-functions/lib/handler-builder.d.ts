import * as express from 'express';
import { CloudFunction, EventContext, HttpsFunction } from './cloud-functions';
import * as analytics from './providers/analytics';
import * as auth from './providers/auth';
import * as database from './providers/database';
import * as firestore from './providers/firestore';
import * as https from './providers/https';
import * as pubsub from './providers/pubsub';
import * as remoteConfig from './providers/remoteConfig';
import * as storage from './providers/storage';
import * as tasks from './providers/tasks';
import * as testLab from './providers/testLab';
/**
 * The `HandlerBuilder` class facilitates the writing of functions by developers
 * building Firebase Extensions as well as developers who want to use the gcloud CLI or
 * Google Cloud Console to deploy their functions.
 *
 * **Do not use `HandlerBuilder` when writing normal functions for deployment via
 * the Firebase CLI.** For normal purposes, use
 * [`FunctionBuilder`](/docs/reference/functions/function_builder_.functionbuilder).
 */
export declare class HandlerBuilder {
    constructor();
    /**
     * Create a handler for HTTPS events.
  
     * `onRequest` handles an HTTPS request and has the same signature as an Express app.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.https.onRequest((req, res) => { ... })
     * ```
     *
     * `onCall` declares a callable function for clients to call using a Firebase SDK.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.https.onCall((data, context) => { ... })
     * ```
     */
    get https(): {
        onRequest: (handler: (req: express.Request, resp: express.Response) => void) => HttpsFunction;
        onCall: (handler: (data: any, context: https.CallableContext) => any | Promise<any>) => HttpsFunction;
    };
    /**
     * Create a handler for tasks functions.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.tasks.onDispatch((data, context) => { ... })
     * ```
     */
    /** @hidden */
    get tasks(): {
        readonly taskQueue: {
            onDispatch: (handler: (data: any, context: tasks.TaskContext) => void | Promise<void>) => HttpsFunction;
        };
    };
    /**
     * Create a handler for Firebase Realtime Database events.
     *
     * `ref.onCreate` handles the creation of new data.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.database.ref.onCreate((snap, context) => { ... })
     * ```
     *
     * `ref.onUpdate` handles updates to existing data.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.database.ref.onUpdate((change, context) => { ... })
     * ```
  
     * `ref.onDelete` handles the deletion of existing data.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.database.ref.onDelete((snap, context) => { ... })
     * ```
  
     * `ref.onWrite` handles the creation, update, or deletion of data.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.database.ref.onWrite((change, context) => { ... })
     * ```
     */
    get database(): {
        /** @hidden */
        readonly instance: {
            readonly ref: database.RefBuilder;
        };
        readonly ref: database.RefBuilder;
    };
    /**
     * Create a handler for Cloud Firestore events.
     *
     * `document.onCreate` handles the creation of new documents.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.firestore.document.onCreate((snap, context) => { ... })
     * ```
  
     * `document.onUpdate` handles updates to existing documents.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.firestore.document.onUpdate((change, context) => { ... })
     * ```
  
     * `document.onDelete` handles the deletion of existing documents.
     *
     * @example
     * ```javascript
     * exports.myFunction = functions.handler.f